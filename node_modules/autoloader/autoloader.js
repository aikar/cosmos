/*
 *  This package exports one function: namespace
 *  in order to create a system of namespace loading 
 *  from a given directory. Directories and files are
 *  loaded into a proxy object in order to provide a
 *  system for loading additional files and directories
 *  the namespace.
 *
 *  This system does not proxy scalar values on an object
 *  because of the 
 *
 */
var 
  fs = require("fs"),
  path = require("path");


// make sure its loaded first
var fileCache = {};

function defineGlobalGetter(name, fn) {
  global.__defineGetter__(name, function() {    
    delete global[name];
    var val = fn();
    // if the callback function set the global for us, don't overwrite it.
    if (global[name] == undefined) {
      global[name] = val;
    }
    return global[name];
  });
}

function registerAutoloader(path, subpath) {
  subpath = subpath || '/';
  var basePath = path + subpath;
  var files = fs.readdirSync(basePath);
  files.forEach(function(file) {
    var fullPath = basePath + file;
    var stat = fs.statSync(fullPath);
    if (stat.isDirectory()) {
      registerAutoloader(path, subpath + file + '/');
    } else {
      var extLoc = file.lastIndexOf('.');
      if (extLoc != -1) {
        var ext = file.substr(extLoc);
        if (require.extensions[ext]) {
          var varName = (subpath.substr(1) + file.substr(0, extLoc));
          varName = varName.replace(/[^a-z0-9]/gi,'_');
          defineGlobalGetter(varName, function() {
            return require(fullPath);
          });
        }
      }
    }
  });
}

global.registerAutoloader = registerAutoloader;


