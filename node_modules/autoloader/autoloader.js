/*
 *  This package exports one function: namespace
 *  in order to create a system of namespace loading 
 *  from a given directory. Directories and files are
 *  loaded into a proxy object in order to provide a
 *  system for loading additional files and directories
 *  the namespace.
 *
 *  This system does not proxy scalar values on an object
 *  because of the 
 *
 */
var Proxy = require("node-proxy"),
  fs = require("fs"),
  sys = require("sys"),
  path = require("path"),
  undef, extensions = [".js", ".class.js"];

function isFunction(fn) {
  return !!fn && 
      Object.prototype.toString.call(fn) == 
        "[object Function]";
}

function isScalar(fn) {
  switch (typeof fn) {
    case "string": return true;
    case "number": return true;
  }
  return false;
}

function inPath(file) {
  var i = 0, l = extensions.length;

  for (;i<l;++i) {
    if (path.existsSync(file + extensions[i])) {
      return file + extensions[i];
    }
  }
  return false;
}
// make sure its loaded first

require('joose');

var LAST_CLASS;

var orig = {};
var overloaded = {};
// joose globals to overload.
var overload = ['Class', 'Role','Singleton', 'LazyClass', 'LazyRole', 'Module'];


overload.forEach(function (key) {
  orig[key]  = global[key];
  overloaded[key] = function() {
    var args = [].slice.call(arguments);
    if (typeof args[0] == 'string') {
      args.shift();
    }
    LAST_CLASS = orig[key].apply(this, args);
    return LAST_CLASS;
  }
});

function overloadJoose() {
  LAST_CLASS = null;
  overload.forEach(function (key) {
    global[key] = overloaded[key];
  });
}
function restoreJoose() {  
  overload.forEach(function (key) {
    global[key] = orig[key];
  });
}
function loadJooseClass(file) {

  overloadJoose();
  var obj;
  if ((file = inPath(file)) !== false) {
    obj = require(file);
  }
  restoreJoose();
  if ((!obj || !Object.keys(obj).length) && LAST_CLASS) {
    obj = LAST_CLASS;
  }
  return obj;
}
function namespace(filePath, properties) {
  properties = properties || {};
  
  var scalar = isScalar(properties),
    func = isFunction(filePath),
    handlers = {
      get: function(rec, name) {
        if (name === "valueOf" || name === "toString") {
          return function(){
            return properties[name].call(this);
          };
        }
        if (!(name in properties)) {
          if (func) {
            properties[name] = filePath(name, properties);
          } else {
            //sys.puts(name);
            var file = path.join(filePath, name),
              stat, obj;
            
            obj = loadJooseClass(file);
            
            if (!obj) {
              try{
                // would work if it was a directory
                stat = fs.statSync(file);
              } catch(e) {}
            }
            if (stat || obj) {
              properties[name] = obj ? 
                      namespace(file, obj) : 
                      // this allows you to use an 
                      // object as a namespace as well
                      namespace(file);
            } else {
              return undef;
            }
          }
        } else if (!isScalar(properties[name]) && !Proxy.isProxy(properties[name])) {
          properties[name] = namespace(path.join(filePath, name), properties[name]);
        }
        //sys.puts("returning");
        return properties[name];
      
      },
      has: function(name) {
        return name === "valueOf" || 
            name === "toString" || 
            inPath(path.join(filePath, name));
      },
      set: function(rec, name, value) {
        properties[name] = value;
      },
      "delete": function(name) {
        delete properties[name];
      },
      enumerate: function() {
        return Object.keys(properties);
      },
      fix: function() {
        return undef;
      }
    };
  
  return isFunction(properties) ?
      Proxy.createFunction(handlers, function(scope) {
        return properties.apply(this, arguments);
      }, function() {
        var instance = Object.create(properties.prototype);
        properties.apply(instance, arguments);
        return instance;
      }) :
      Proxy.create(handlers, properties.constructor.prototype);
};
global.registerAutoloader = function(globalName, path) {
  var cls = loadJooseClass(path + '/' + globalName);
  global[globalName] = namespace(path, cls);
}



